g
# graficamos con ggpairs coloreando por property type
g <- ggpairs(numeric_train_df, aes(color = genero),
upper = list(continuous = wrap("cor", size = 2, hjust=0.5)), legend = 25, progress=FALSE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "bottom") +
theme_bw()
# hacemos un loop para cambiar los colores del gráfico
for(i in 1:g$nrow) {
for(j in 1:g$ncol){
g[i,j] <- g[i,j] +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2")
}
}
g
# graficamos con ggpairs coloreando por property type
g <- ggpairs(numeric_6_df, aes(color = genero),
upper = list(continuous = wrap("cor", size = 2, hjust=0.5)), legend = 25, progress=FALSE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "bottom") +
theme_bw()
# hacemos un loop para cambiar los colores del gráfico
for(i in 1:g$nrow) {
for(j in 1:g$ncol){
g[i,j] <- g[i,j] +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2")
}
}
g
# graficamos con ggpairs coloreando por property type
g <- ggpairs(numeric_train_df, aes(color = genero),
upper = list(continuous = wrap("cor", size = 2, hjust=0.5)), legend = 25, progress=FALSE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "bottom") +
theme_bw()
# hacemos un loop para cambiar los colores del gráfico
for(i in 1:g$nrow) {
for(j in 1:g$ncol){
g[i,j] <- g[i,j] +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2")
}
}
g
theme <- theme(text = element_text(size=10),
plot.title = element_text(size = 12, face = "bold.italic", hjust = 0.5),
axis.title.x = element_text(size = 10, face="bold", colour='black'),
axis.title.y = element_text(size = 10, face="bold"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_text(face="bold"))
library(tidyverse)
library(tidymodels)
library(rsample)
library(ggplot2)
library(GGally)
library(corrr)
encuesta_salud_train_df <- read.csv("datasets/encuesta_salud_train.csv")
glimpse(encuesta_salud_train_df)
encuesta_salud_train_df %>%
head()
tabla_exploratorios =  encuesta_salud_train_df %>%
gather(.,
key = "variables",
value = "valores") %>% # agrupamos por las variables del set
group_by(variables) %>%
summarise(valores_unicos = n_distinct(valores),
porcentaje_faltantes = sum(is.na(valores))/nrow(encuesta_salud_train_df)*100) %>%
arrange(desc(porcentaje_faltantes), valores_unicos) # ordenamos por porcentaje de faltantes y valores unicos
tabla_exploratorios
# Genero un data frame con las variables numéricas
numeric_train_df = encuesta_salud_train_df %>% dplyr::select(where(is.numeric))
numeric_train_df = numeric_df[, ! names(numeric_df) %in% c("record"), drop = F]
numeric_train_df["genero"] = encuesta_salud_train_df["genero"]
numeric_train_df %>%
head()
# graficamos con ggpairs coloreando por property type
g <- ggpairs(numeric_train_df, aes(color = genero),
upper = list(continuous = wrap("cor", size = 2, hjust=0.5)), legend = 25, progress=FALSE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "bottom") +
theme_bw()
# hacemos un loop para cambiar los colores del gráfico
for(i in 1:g$nrow) {
for(j in 1:g$ncol){
g[i,j] <- g[i,j] +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2")
}
}
g
numeric_train_df %>%
correlate() %>%
network_plot(min_cor = 0.01)
encuesta_salud_train_df %>% distinct(frecuencia_hambre_mensual) %>% select(frecuencia_hambre_mensual)
encuesta_salud_train_df %>% distinct(consumo_semanal_verdura) %>% select(consumo_semanal_verdura)
encuesta_salud_train_df %>% distinct(consumo_semanal_comida_grasa) %>% select(consumo_semanal_comida_grasa)
encuesta_salud_train_df["verduras"] = encuesta_salud_train_df %>%
select(consumo_semanal_verdura) %>%
map(~ str_replace(.x,"No comí verduras ni hortalizas durante los últimos 7 días",'Nunca')) %>%
map(~ str_replace(.x,"1 vez al día",'1/dia')) %>%
map(~ str_replace(.x,"2 veces al día",'2/dia')) %>%
map(~ str_replace(.x,"3 veces al día",'3/dia')) %>%
map(~ str_replace(.x,"4 o más veces al día",'4+/dia')) %>%
map(~ str_replace(.x,"Dato perdido",'Perdido')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'1-3/sem')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'4-6/sem'))
encuesta_salud_train_df["comida_grasa"] = encuesta_salud_train_df %>%
select(consumo_semanal_comida_grasa) %>%
map(~ str_replace(.x,"No comí comida alta en grasa en los últimos 7 días",'Nunca')) %>%
map(~ str_replace(.x,"1 vez al día",'1/dia')) %>%
map(~ str_replace(.x,"2 veces al día",'2/dia')) %>%
map(~ str_replace(.x,"3 veces al día",'3/dia')) %>%
map(~ str_replace(.x,"4 o más veces al día",'4+/dia')) %>%
map(~ str_replace(.x,"Dato perdido",'Perdido')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'1-3/sem')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'4-6/sem'))
encuesta_salud_train_df["hambre_mensual"] = encuesta_salud_train_df %>%
select(frecuencia_hambre_mensual) %>%
map(~ ifelse(.x == "Nunca", 0, .x)) %>%
map(~ ifelse(.x == "Rara vez", 1, .x)) %>%
map(~ ifelse(.x == "Algunas veces", 2, .x)) %>%
map(~ ifelse(.x == "Casi siempre", 3, .x)) %>%
map(~ ifelse(.x == "Siempre", 4, .x)) %>%
map(~ ifelse(.x == "Dato perdido", -1, .x))
mosaicplot(table(encuesta_salud_train_df$verduras,encuesta_salud_train_df$hambre_mensual),col=terrain.colors(7:11),main="Distribución hambre mensual - consumo semanal de verduras",ylab="Frecuencia hambre mensual",xlab="Consumo semanal de verduras")
legend("bottom",cex=0.5,title="Frecuencia hambre mensual",c("-1: Dato perdido","0: Nunca","1: Rara vez","2: Algunas veces ","3: Casi siempre","4: Siempre"),fill=terrain.colors(7:11),horiz=T,xpd=TRUE,inset=c(0, -0.25))
mosaicplot(table(encuesta_salud_train_df$comida_grasa,encuesta_salud_train_df$hambre_mensual),col=terrain.colors(7:11),main="Distribución hambre mensual - consumo semanal de comida grasa",ylab="Frecuencia hambre mensual",xlab="Consumo semanal de comida grasa")
legend("bottom",cex=0.5,title="Frecuencia hambre mensual",c("-1: Dato perdido","0: Nunca","1: Rara vez","2: Algunas veces ","3: Casi siempre","4: Siempre"),fill=terrain.colors(7:11),horiz=T,xpd=TRUE,inset=c(0, -0.25))
# Cargo los datasets de train y test
encuesta_salud_train_df <- read.csv("datasets/encuesta_salud_train.csv")
encuesta_salud_test_df <- read.csv("datasets/encuesta_salud_test.csv")
# ajustamos el modelo lineal múltiple
modelo_inicial = lm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_train_df)
# Resumen del modelo
tidy_modelo_inicial <- tidy(modelo_inicial, conf.int = TRUE)
tidy_modelo_inicial
options("scipen"=1)
tidy_modelo_inicial %>%
select(term, statistic, p.value, conf.low, conf.high)
summary(modelo_inicial)
glance(modelo_inicial)
# Realizo una transformación simple para definir la categoría basal
encuesta_salud_train_df %>% distinct(consumo_semanal_snacks) %>% select(consumo_semanal_snacks)
# genero una nueva variable dummy para ubicar la categoría basal
encuesta_salud_train_df["snacksDummy"] = encuesta_salud_train_df %>%
select(consumo_semanal_snacks) %>%
map(~ str_replace(.x,"No comí comida salada o snacks en los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'1/dia')) %>%
map(~ str_replace(.x,"2 veces al día",'2/dia')) %>%
map(~ str_replace(.x,"3 veces al día",'3/dia')) %>%
map(~ str_replace(.x,"4 o más veces al día",'4+/dia')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'1-3/sem')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'4-6/sem'))
modelo_categoricas = lm(formula = peso ~ altura + edad + genero + snacksDummy + (genero * edad), data = encuesta_salud_train_df)
# Resumen del modelo
tidy_modelo_categoricas <- tidy(modelo_categoricas, conf.int = TRUE)
tidy_modelo_categoricas
options("scipen"=1)
tidy_modelo_categoricas %>%
select(term, statistic, p.value, conf.low, conf.high)
summary(modelo_categoricas)
glance(modelo_categoricas)
tidy(anova(modelo_categoricas))
# genero una nueva variable dummy para ubicar la categoría basal
encuesta_salud_train_df["snacksRedefined"] = encuesta_salud_train_df %>%
select(consumo_semanal_snacks) %>%
map(~ str_replace(.x,"No comí comida salada o snacks en los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
modelo_categoricas_redefined = lm(formula = peso ~ altura + edad + genero + snacksRedefined + (genero * edad), data = encuesta_salud_train_df)
# Resumen del modelo
tidy(modelo_categoricas_redefined, conf.int = TRUE)
summary(modelo_categoricas_redefined)
tidy(anova(modelo_categoricas_redefined))
my_first_model = lm(formula = peso ~ altura + edad + genero + (genero * altura), data = encuesta_salud_train_df)
tidy(my_first_model)
cmp_model_list_1 <- list(modelo_inicial = modelo_inicial, modelo_cat_redefinido = modelo_categoricas_redefined, modelo_propio = my_first_model)
# calculamos las métricas para todos los modelos
glance_train_1 = map_df(cmp_model_list_1, broom::glance, .id = "model") %>%
# ordenamos por R2 ajustado
arrange(desc(adj.r.squared))
glance_train_1
# Aplicamos la función augment a los modelos
training_predictions_1 = map(.x = cmp_model_list_1, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = training_predictions_1, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# genero una nueva variable dummy para ubicar la categoría basal
encuesta_salud_test_df["snacksRedefined"] = encuesta_salud_test_df %>%
select(consumo_semanal_snacks) %>%
map(~ str_replace(.x,"No comí comida salada o snacks en los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
# Aplicamos la función augment a los 4 modelos con el set de testing
testing_predicciones_1 = map(.x = cmp_model_list_1, .f = augment, newdata = encuesta_salud_test_df)
# Obtenemos el RMSE para los 4 modelos
map_dfr(.x = testing_predicciones_1, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# genero una nueva variable dummy para ubicar la categoría basal
encuesta_salud_train_df["snacksRedefined"] = encuesta_salud_train_df %>%
select(consumo_semanal_snacks) %>%
map(~ str_replace(.x,"No comí comida salada o snacks en los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
encuesta_salud_train_df["verdurasRedefined"] = encuesta_salud_train_df %>%
select(consumo_semanal_verdura) %>%
map(~ str_replace(.x,"No comí verduras ni hortalizas durante los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
encuesta_salud_train_df["frutasRedefined"] = encuesta_salud_train_df %>%
select(consumo_semanal_frutas) %>%
map(~ str_replace(.x,"No comí frutas durante los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
encuesta_salud_train_df["grasasRedefined"] = encuesta_salud_train_df %>%
select(consumo_semanal_comida_grasa) %>%
map(~ str_replace(.x,"No comí comida alta en grasa en los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
encuesta_salud_train_df %>% distinct(verdurasRedefined) %>% select(verdurasRedefined)
encuesta_salud_train_df %>% distinct(frutasRedefined) %>% select(frutasRedefined)
encuesta_salud_train_df %>% distinct(grasasRedefined) %>% select(grasasRedefined)
encuesta_salud_train_df %>% distinct(snacksRedefined) %>% select(snacksRedefined)
encuesta_salud_train_df = encuesta_salud_train_df %>%
mutate(comidaSana = if_else(frutasRedefined == '0' & verdurasRedefined == '0', '0',
if_else(frutasRedefined == 'Diario' & verdurasRedefined == 'Diario', 'Diario',
if_else(frutasRedefined == 'Ocacional' & verdurasRedefined == 'Ocacional', 'Ocacional',
if_else(frutasRedefined == 'Dato perdido' | verdurasRedefined == 'Dato perdido', 'Dato perdido',
if_else(frutasRedefined == 'Diario' | verdurasRedefined == 'Diario', 'SemiDiario',
if_else(frutasRedefined == 'Ocacional' | verdurasRedefined == 'Ocacional', 'SemiOcacional',
'Otro'
)))))))  %>%
mutate(comidaChatarra = if_else(snacksRedefined == '0' & grasasRedefined == '0', '0',
if_else(snacksRedefined == 'Diario' & grasasRedefined == 'Diario', 'Diario',
if_else(snacksRedefined == 'Ocacional' & grasasRedefined == 'Ocacional', 'Ocacional',
if_else(snacksRedefined == 'Dato perdido' | grasasRedefined == 'Dato perdido', 'Dato perdido',
if_else(snacksRedefined == 'Diario' | grasasRedefined == 'Diario', 'SemiDiario',
if_else(snacksRedefined == 'Ocacional' | grasasRedefined == 'Ocacional', 'SemiOcacional',
'Otro'
)))))))
encuesta_salud_train_df %>% distinct(comidaSana) %>% select(comidaSana)
encuesta_salud_train_df %>% distinct(comidaChatarra) %>% select(comidaChatarra)
# genero una nueva variable dummy para ubicar la categoría basal
encuesta_salud_test_df["snacksRedefined"] = encuesta_salud_test_df %>%
select(consumo_semanal_snacks) %>%
map(~ str_replace(.x,"No comí comida salada o snacks en los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
encuesta_salud_test_df["verdurasRedefined"] = encuesta_salud_test_df %>%
select(consumo_semanal_verdura) %>%
map(~ str_replace(.x,"No comí verduras ni hortalizas durante los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
encuesta_salud_test_df["frutasRedefined"] = encuesta_salud_test_df %>%
select(consumo_semanal_frutas) %>%
map(~ str_replace(.x,"No comí frutas durante los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
encuesta_salud_test_df["grasasRedefined"] = encuesta_salud_test_df %>%
select(consumo_semanal_comida_grasa) %>%
map(~ str_replace(.x,"No comí comida alta en grasa en los últimos 7 días",'0')) %>%
map(~ str_replace(.x,"1 vez al día",'Diario')) %>%
map(~ str_replace(.x,"2 veces al día",'Diario')) %>%
map(~ str_replace(.x,"3 veces al día",'Diario')) %>%
map(~ str_replace(.x,"4 o más veces al día",'Diario')) %>%
map(~ str_replace(.x,"1 a 3 veces durante los últimos 7 días",'Ocacional')) %>%
map(~ str_replace(.x,"4 a 6 veces durante los últimos 7 días",'Ocacional'))
encuesta_salud_test_df %>% distinct(verdurasRedefined) %>% select(verdurasRedefined)
encuesta_salud_test_df %>% distinct(frutasRedefined) %>% select(frutasRedefined)
encuesta_salud_test_df %>% distinct(grasasRedefined) %>% select(grasasRedefined)
encuesta_salud_test_df %>% distinct(snacksRedefined) %>% select(snacksRedefined)
encuesta_salud_test_df = encuesta_salud_test_df %>%
mutate(comidaSana = if_else(frutasRedefined == '0' & verdurasRedefined == '0', '0',
if_else(frutasRedefined == 'Diario' & verdurasRedefined == 'Diario', 'Diario',
if_else(frutasRedefined == 'Ocacional' & verdurasRedefined == 'Ocacional', 'Ocacional',
if_else(frutasRedefined == 'Dato perdido' | verdurasRedefined == 'Dato perdido', 'Dato perdido',
if_else(frutasRedefined == 'Diario' | verdurasRedefined == 'Diario', 'SemiDiario',
if_else(frutasRedefined == 'Ocacional' | verdurasRedefined == 'Ocacional', 'SemiOcacional',
'Otro'
)))))))  %>%
mutate(comidaChatarra = if_else(snacksRedefined == '0' & grasasRedefined == '0', '0',
if_else(snacksRedefined == 'Diario' & grasasRedefined == 'Diario', 'Diario',
if_else(snacksRedefined == 'Ocacional' & grasasRedefined == 'Ocacional', 'Ocacional',
if_else(snacksRedefined == 'Dato perdido' | grasasRedefined == 'Dato perdido', 'Dato perdido',
if_else(snacksRedefined == 'Diario' | grasasRedefined == 'Diario', 'SemiDiario',
if_else(snacksRedefined == 'Ocacional' | grasasRedefined == 'Ocacional', 'SemiOcacional',
'Otro'
)))))))
encuesta_salud_test_df %>% distinct(comidaSana) %>% select(comidaSana)
encuesta_salud_test_df %>% distinct(comidaChatarra) %>% select(comidaChatarra)
my_model_2 = lm(formula = peso ~ altura + edad + genero + (genero * altura) + comidaSana + comidaChatarra + dias_consumo_comida_rapida, data = encuesta_salud_train_df)
summary(my_model_2)
anova(my_model_2)
my_model_2_ajustado = lm(formula = peso ~ altura + edad + genero + (genero * altura)  + (comidaChatarra * dias_consumo_comida_rapida), data = encuesta_salud_train_df)
summary(my_model_2_ajustado)
anova(my_model_2_ajustado)
my_model_2_reducido = lm(formula = peso ~ altura + edad + genero + (genero * altura) + comidaChatarra, data = encuesta_salud_train_df)
summary(my_model_2_reducido)
anova(my_model_2_reducido)
cmp_model_list_2<- list(modelo_inicial = modelo_inicial, modelo_cat_redefinido = modelo_categoricas_redefined, modelo_propio = my_model_2, modelo_propio_ajustado = my_model_2_ajustado, modelo_propio_reducido = my_model_2_reducido)
# Aplicamos la función augment a los modelos
training_predictions_2 = map(.x = cmp_model_list_2, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = training_predictions_2, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# Aplicamos la función augment a los 4 modelos con el set de testing
testing_predicciones_2 = map(.x = cmp_model_list_2, .f = augment, newdata = encuesta_salud_test_df)
# Obtenemos el RMSE para los 4 modelos
map_dfr(.x = testing_predicciones_2, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
plot(modelo_inicial)
# Cargo el nuevo dataset
encuesta_salud_modelo6_df <- read.csv("datasets/encuesta_salud_modelo6.csv")
# Genero un data frame con las variables numéricas
numeric_6_df = encuesta_salud_modelo6_df %>% dplyr::select(where(is.numeric))
numeric_6_df = numeric_df[, ! names(numeric_df) %in% c("record"), drop = F]
numeric_6_df["genero"] = encuesta_salud_modelo6_df["genero"]
# graficamos con ggpairs coloreando por property type
g <- ggpairs(numeric_6_df, aes(color = genero),
upper = list(continuous = wrap("cor", size = 2, hjust=0.5)), legend = 25, progress=FALSE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "bottom") +
theme_bw()
# hacemos un loop para cambiar los colores del gráfico
for(i in 1:g$nrow) {
for(j in 1:g$ncol){
g[i,j] <- g[i,j] +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2")
}
}
g
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = lm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df)
# Resumen del modelo
tidy(modelo_inicial_robusto, conf.int = TRUE)
summary(modelo_inicial_robusto)
initial_models_list <- list(modelo_inicial = modelo_inicial, modelo_robusto = modelo_inicial_robusto)
# Aplicamos la función augment a los modelos iniciales
initial_models = map(.x = initial_models_list, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = lm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df)
# Resumen del modelo
tidy(modelo_inicial_robusto, conf.int = TRUE)
summary(modelo_inicial_robusto)
# ajustamos el modelo lineal múltiple
modelo_inicial_outliers = lm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df)
# Resumen del modelo
tidy(modelo_inicial_outliers, conf.int = TRUE)
summary(modelo_inicial_outliers)
initial_models_list <- list(modelo_inicial = modelo_inicial, modelo_inicial_outliers = modelo_inicial_outliers)
# Aplicamos la función augment a los modelos iniciales
initial_models = map(.x = initial_models_list, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
initial_models_list <- list(modelo_inicial = modelo_inicial, modelo_inicial_outliers = modelo_inicial_outliers)
# Aplicamos la función augment a los modelos iniciales
initial_models = map(.x = initial_models_list, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df)
library(tidyverse)
library(tidymodels)
library(rsample)
library(ggplot2)
library(GGally)
library(corrr)
library(MASS)
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df)
# Resumen del modelo
tidy(modelo_inicial_robusto, conf.int = TRUE)
summary(modelo_inicial_robusto)
initial_models_list_2 <- list(modelo_inicial = modelo_inicial, modelo_inicial_outliers = modelo_inicial_outliers, modelo_inicial_robusto = modelo_inicial_robusto)
# Aplicamos la función augment a los modelos iniciales
initial_models_2 = map(.x = initial_models_list_2, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models_2, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df, method = c("M", "MM", "model.frame"),)
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df, method = c("M", "MM", "model.frame"))
# Resumen del modelo
tidy(modelo_inicial_robusto, conf.int = TRUE)
summary(modelo_inicial_robusto)
initial_models_list_2 <- list(modelo_inicial = modelo_inicial, modelo_inicial_outliers = modelo_inicial_outliers, modelo_inicial_robusto = modelo_inicial_robusto)
# Aplicamos la función augment a los modelos iniciales
initial_models_2 = map(.x = initial_models_list_2, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models_2, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df, method = c("M", "MM", "model.frame"))
# Resumen del modelo
tidy(modelo_inicial_robusto, conf.int = TRUE)
summary(modelo_inicial_robusto)$sigma
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df, method = c("M", "MM", "model.frame"))
# Resumen del modelo
tidy(modelo_inicial_robusto, conf.int = TRUE)
summary(modelo_inicial_outliers)$sigma
summary(modelo_inicial_robusto)$sigma
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df, method = c("M", "MM", "model.frame"))
# Resumen del modelo
tidy(modelo_inicial_robusto, conf.int = TRUE)
summary(modelo_inicial)$sigma
summary(modelo_inicial_outliers)$sigma
summary(modelo_inicial_robusto)$sigma
# ajustamos el modelo lineal múltiple
modelo_inicial_no_robusto = lm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df)
# Resumen del modelo
tidy(modelo_inicial_no_robusto, conf.int = TRUE)
summary(modelo_inicial_no_robusto)
initial_models_list <- list(modelo_inicial = modelo_inicial, modelo_inicial_no_robusto = modelo_inicial_no_robusto)
# Aplicamos la función augment a los modelos iniciales
initial_models = map(.x = initial_models_list, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df, method = c("M", "MM", "model.frame"))
# Resumen del modelo
tidy(modelo_inicial_robusto, conf.int = TRUE)
summary(modelo_inicial_outliers)$sigma
summary(modelo_inicial_robusto)$sigma
initial_models_list_2 <- list(modelo_inicial_no_robusto = modelo_inicial_no_robusto, modelo_inicial_robusto = modelo_inicial_robusto)
# Aplicamos la función augment a los modelos iniciales
initial_models_2 = map(.x = initial_models_list_2, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models_2, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df, method = c("M", "MM", "model.frame"))
# Resumen del modelo
tidy(modelo_inicial_robusto, conf.int = TRUE)
summary(modelo_inicial_outliers)
summary(modelo_inicial_outliers)$sigma
summary(modelo_inicial_robusto)
summary(modelo_inicial_robusto)$sigma
# Resumen del modelo no robusto
summary(modelo_inicial_no_robusto)
summary(modelo_inicial_no_robusto)$sigma
# Resumen del modelo robusto
summary(modelo_inicial_robusto)
summary(modelo_inicial_robusto)$sigma
initial_models_list_2 <- list(modelo_inicial_no_robusto = modelo_inicial_no_robusto, modelo_inicial_robusto = modelo_inicial_robusto)
# Aplicamos la función augment a los modelos iniciales
initial_models_2 = map(.x = initial_models_list_2, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models_2, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
plot(modelo_inicial_no_robusto)
plot(modelo_inicial_robusto)
# ajustamos el modelo lineal múltiple
modelo_inicial_no_robusto = lm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df)
# Resumen del modelo
tidy(modelo_inicial_no_robusto, conf.int = TRUE)
summary(modelo_inicial_no_robusto)
initial_models_list <- list(modelo_inicial = modelo_inicial, modelo_inicial_no_robusto = modelo_inicial_no_robusto)
# Aplicamos la función augment a los modelos iniciales
initial_models = map(.x = initial_models_list, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df, method = c("M", "MM", "model.frame"))
# Resumen del modelo no robusto
summary(modelo_inicial_no_robusto)
summary(modelo_inicial_no_robusto)$sigma
# ajustamos el modelo lineal múltiple
modelo_inicial_robusto = rlm(formula = peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = encuesta_salud_modelo6_df)
# Resumen del modelo no robusto
summary(modelo_inicial_no_robusto)
summary(modelo_inicial_no_robusto)$sigma
# Resumen del modelo robusto
summary(modelo_inicial_robusto)
summary(modelo_inicial_robusto)$sigma
initial_models_list_2 <- list(modelo_inicial_no_robusto = modelo_inicial_no_robusto, modelo_inicial_robusto = modelo_inicial_robusto)
# Aplicamos la función augment a los modelos iniciales
initial_models_2 = map(.x = initial_models_list_2, .f = augment)
# Obtenemos el RMSE para los 4 modelos
map_df(.x = initial_models_2, .f = metrics, truth = peso, estimate = .fitted, .id="modelo") %>% arrange(.metric,.estimate)
